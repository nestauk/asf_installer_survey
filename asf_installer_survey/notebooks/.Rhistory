table_df$EmploymentType <- rownames(table_df)
# Reshape the data to long format for ggplot
table_long <- gather(table_df, key = "Service and maintenance", value = "Frequency", -EmploymentType)
# Define the order of the x-axis labels
order_labels <- c("Only heat pumps",
"Mostly heat pumps, and some other systems",
"An equal number of heat pumps and other systems",
"Mostly other systems, and some heat pumps",
"Almost entirely other systems, and the occasional heat pump",
"Don't but plan to do so in the next 12 months",
"Don't and have no plans to do so")
# Create a ggplot bar plot
ggplot(table_long, aes(x = factor(`Service and maintenance`, levels = order_labels), y = Frequency, fill = EmploymentType)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Figure 2.7b. Distribution of the different heating systems service and maintenance by employment type",
x = "",
y = "Frequency",
fill = "Employment type") +
theme_bw() +
scale_x_discrete(labels = label_wrap_gen(width = 10)) +
scale_fill_manual(values = wes_palette("Zissou1"))
# Chunk 111
# Alternative plot
ggplot(table_long, aes(x = factor(`Service and maintenance`, levels = order_labels), y = Frequency, fill = EmploymentType)) +
geom_bar(stat = "identity") +
labs(title = "Figure 2.7b. Distribution of the different heating systems service and maintenance by employment type",
x = "",
y = "Frequency",
fill = "Employment type") +
theme_bw() +
scale_x_discrete(labels = label_wrap_gen(width = 10)) +
scale_fill_manual(values = wes_palette("Zissou1"))
# Chunk 112
# Create table #
# Table for breakdown by employment type
table <- xtabs(~ dummy_employment_type + service_maintenance_merge, data)
# Combine the list elements into a data frame
table_df <- as.data.frame.matrix(table)
# Rename the columns for better display
colnames(table_df) <- c("Only heat pumps",
"Mostly heat pumps, and some other systems",
"An equal number of heat pumps and other systems",
"Mostly other systems, and some heat pumps",
"Almost entirely other systems, and the occasional heat pump",
"Don't but plan to do so in the next 12 months",
"Don't and have no plans to do so")
# Create the table
kable(table_df,
caption = "Table 2.7c. Distribution of the different heating systems service and maintenance by employment type",
align = "c") %>%
kable_classic(bootstrap_options = c("striped"),
full_width = T,
html_font = "Arial") %>%
row_spec(0, bold = TRUE)
# Chunk 113
### OBQA
data |> tabyl(dummy_employment_type, service_maintenance_merge)
# Chunk 114
# Create plot #
# Table for breakdown by employment type
table <- xtabs(~ dummy_employment_type + service_maintenance_merge, data)
# Combine the list elements into a data frame
table_df <- as.data.frame.matrix(table)
# Rename the columns for better display
colnames(table_df) <- c("Only heat pumps",
"Mostly heat pumps, and some other systems",
"An equal number of heat pumps and other systems",
"Mostly other systems, and some heat pumps",
"Almost entirely other systems, and the occasional heat pump",
"Don't but plan to do so in the next 12 months",
"Don't and have no plans to do so")
# Add employment_type as a column
table_df$EmploymentType <- rownames(table_df)
# Reshape the data to long format for ggplot
table_long <- gather(table_df, key = "Service and maintenance", value = "Frequency", -EmploymentType)
# Define the order of the x-axis labels
order_labels <- c("Only heat pumps",
"Mostly heat pumps, and some other systems",
"An equal number of heat pumps and other systems",
"Mostly other systems, and some heat pumps",
"Almost entirely other systems, and the occasional heat pump",
"Don't but plan to do so in the next 12 months",
"Don't and have no plans to do so")
# Create a ggplot bar plot
ggplot(table_long, aes(x = factor(`Service and maintenance`, levels = order_labels), y = Frequency, fill = EmploymentType)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Figure 2.7c. Distribution of the different heating systems service and maintenance by employment type",
x = "",
y = "Frequency",
fill = "Employment type") +
theme_bw() +
scale_x_discrete(labels = label_wrap_gen(width = 10)) +
scale_fill_manual(values = wes_palette("Zissou1"))
# Chunk 115
# Alternative plot
ggplot(table_long, aes(x = factor(`Service and maintenance`, levels = order_labels), y = Frequency, fill = EmploymentType)) +
geom_bar(stat = "identity") +
labs(title = "Figure 2.7c. Distribution of the different heating systems service and maintenance by employment type",
x = "",
y = "Frequency",
fill = "Employment type") +
theme_bw() +
scale_x_discrete(labels = label_wrap_gen(width = 10)) +
scale_fill_manual(values = wes_palette("Zissou1"))
# Chunk 116
# Question 16a
# Turn list into character so r can read the different answers
data$x16a_answer1 <- sapply(data$x16a_what_types_of_heat_pump_has_your_company_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[1]))
data$x16a_answer2 <- sapply(data$x16a_what_types_of_heat_pump_has_your_company_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[2]))
data$x16a_answer3 <- sapply(data$x16a_what_types_of_heat_pump_has_your_company_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[3]))
data$x16a_answer4 <- sapply(data$x16a_what_types_of_heat_pump_has_your_company_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[4]))
data$x16a_answer5 <- sapply(data$x16a_what_types_of_heat_pump_has_your_company_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[5]))
data$x16a_answer6 <- sapply(data$x16a_what_types_of_heat_pump_has_your_company_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[6]))
data$x16a_answer7 <- sapply(data$x16a_what_types_of_heat_pump_has_your_company_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[7]))
data$x16a_answer8 <- sapply(data$x16a_what_types_of_heat_pump_has_your_company_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[8])) # No respondent selected more than 7 options for question 16a
# Check using: table(data$answer)
# Create dummy for each possible option
# Air-source
data <- data %>%
mutate(dummy_air_source_16a = ifelse(str_detect(x16a_answer1, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16a_answer2, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16a_answer3, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16a_answer4, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16a_answer5, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16a_answer6, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16a_answer7, fixed("Air-source (air-to-water) heat pump")), 1, 0))
# Air-to-air heat pump
data <- data %>%
mutate(dummy_air_air_16a = ifelse(str_detect(x16a_answer1, "Air-to-air heat pump") |
str_detect(x16a_answer2, "Air-to-air heat pump") |
str_detect(x16a_answer3, "Air-to-air heat pump") |
str_detect(x16a_answer4, "Air-to-air heat pump") |
str_detect(x16a_answer5, "Air-to-air heat pump") |
str_detect(x16a_answer6, "Air-to-air heat pump") |
str_detect(x16a_answer7, "Air-to-air heat pump"), 1, 0))
# Ground-source heat pump
data <- data %>%
mutate(dummy_ground_source_16a = ifelse(str_detect(x16a_answer1, "Ground-source heat pump") |
str_detect(x16a_answer2, "Ground-source heat pump") |
str_detect(x16a_answer3, "Ground-source heat pump") |
str_detect(x16a_answer4, "Ground-source heat pump") |
str_detect(x16a_answer5, "Ground-source heat pump") |
str_detect(x16a_answer6, "Ground-source heat pump") |
str_detect(x16a_answer7, "Ground-source heat pump"), 1, 0))
# Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)
data <- data %>%
mutate(dummy_hybrid_air_source_16a = ifelse(str_detect(x16a_answer1, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16a_answer2, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16a_answer3, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16a_answer4, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16a_answer5, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16a_answer6, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16a_answer7, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")), 1, 0))
# Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)
data <- data %>%
mutate(dummy_hybrid_ground_source_16a = ifelse(str_detect(x16a_answer1, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16a_answer2, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16a_answer3, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16a_answer4, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16a_answer5, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16a_answer6, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16a_answer7, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")), 1, 0))
# Heat pumps for shared ground loops
data <- data %>%
mutate(dummy_ground_loops_16a = ifelse(str_detect(x16a_answer1, "Heat pumps for shared ground loops") |
str_detect(x16a_answer2, "Heat pumps for shared ground loops") |
str_detect(x16a_answer3, "Heat pumps for shared ground loops") |
str_detect(x16a_answer4, "Heat pumps for shared ground loops") |
str_detect(x16a_answer5, "Heat pumps for shared ground loops") |
str_detect(x16a_answer6, "Heat pumps for shared ground loops") |
str_detect(x16a_answer7, "Heat pumps for shared ground loops"), 1, 0))
# Heat pumps for communal heating systems (air source or ground source)
data <- data %>%
mutate(dummy_communal_heating_16a = ifelse(str_detect(x16a_answer1, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16a_answer2, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16a_answer3, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16a_answer4, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16a_answer5, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16a_answer6, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16a_answer7, fixed("Heat pumps for communal heating systems (air source or ground source)")), 1, 0))
# Water-source heat pump
data <- data %>%
mutate(dummy_water_source_16a = ifelse(str_detect(x16a_answer1, "Water-source heat pump") |
str_detect(x16a_answer2, "Water-source heat pump") |
str_detect(x16a_answer3, "Water-source heat pump") |
str_detect(x16a_answer4, "Water-source heat pump") |
str_detect(x16a_answer5, "Water-source heat pump") |
str_detect(x16a_answer6, "Water-source heat pump") |
str_detect(x16a_answer7, "Water-source heat pump"), 1, 0))
# Other
data <- data %>%
mutate(dummy_other_16a = ifelse(str_detect(x16a_answer1, "Other") |
str_detect(x16a_answer2, "Other") |
str_detect(x16a_answer3, "Other") |
str_detect(x16a_answer4, "Other") |
str_detect(x16a_answer5, "Other") |
str_detect(x16a_answer6, "Other") |
str_detect(x16a_answer7, "Other"), 1, 0))
# Chunk 117
# Question 16b
# Turn list into character so r can read the different answers
data$x16b_answer1 <- sapply(data$x16b_what_types_of_heat_pump_have_you_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[1]))
data$x16b_answer2 <- sapply(data$x16b_what_types_of_heat_pump_have_you_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[2]))
data$x16b_answer3 <- sapply(data$x16b_what_types_of_heat_pump_have_you_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[3]))
data$x16b_answer4 <- sapply(data$x16b_what_types_of_heat_pump_have_you_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[4]))
data$x16b_answer5 <- sapply(data$x16b_what_types_of_heat_pump_have_you_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[5]))
data$x16b_answer6 <- sapply(data$x16b_what_types_of_heat_pump_have_you_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[6]))
data$x16b_answer7 <- sapply(data$x16b_what_types_of_heat_pump_have_you_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[7]))
data$x16b_answer8 <- sapply(data$x16b_what_types_of_heat_pump_have_you_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[8]))
data$x16b_answer9 <- sapply(data$x16b_what_types_of_heat_pump_have_you_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[9]))
data$x16b_answer10 <- sapply(data$x16b_what_types_of_heat_pump_have_you_installed_over_the_last_12_months_select_all_that_apply, function(x) as.character(x[10]))
# No respondent selected more than 9 options for question 16b
# Check using: table(data$answer)
# Create dummy for each possible option
# Air-source
data <- data %>%
mutate(dummy_air_source_16b = ifelse(str_detect(x16b_answer1, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16b_answer2, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16b_answer3, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16b_answer4, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16b_answer5, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16b_answer6, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16b_answer7, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16b_answer8, fixed("Air-source (air-to-water) heat pump")) |
str_detect(x16b_answer9, fixed("Air-source (air-to-water) heat pump")), 1, 0))
# Air-to-air heat pump
data <- data %>%
mutate(dummy_air_air_16b = ifelse(str_detect(x16b_answer1, "Air-to-air heat pump") |
str_detect(x16b_answer2, "Air-to-air heat pump") |
str_detect(x16b_answer3, "Air-to-air heat pump") |
str_detect(x16b_answer4, "Air-to-air heat pump") |
str_detect(x16b_answer5, "Air-to-air heat pump") |
str_detect(x16b_answer6, "Air-to-air heat pump") |
str_detect(x16b_answer7, "Air-to-air heat pump") |
str_detect(x16b_answer8, "Air-to-air heat pump") |
str_detect(x16b_answer9, "Air-to-air heat pump"), 1, 0))
# Ground-source heat pump
data <- data %>%
mutate(dummy_ground_source_16b = ifelse(str_detect(x16b_answer1, "Ground-source heat pump") |
str_detect(x16b_answer2, "Ground-source heat pump") |
str_detect(x16b_answer3, "Ground-source heat pump") |
str_detect(x16b_answer4, "Ground-source heat pump") |
str_detect(x16b_answer5, "Ground-source heat pump") |
str_detect(x16b_answer6, "Ground-source heat pump") |
str_detect(x16b_answer7, "Ground-source heat pump") |
str_detect(x16b_answer8, "Ground-source heat pump") |
str_detect(x16b_answer9, "Ground-source heat pump"), 1, 0))
# Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)
data <- data %>%
mutate(dummy_hybrid_air_source_16b = ifelse(str_detect(x16b_answer1, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer2, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer3, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer4, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer5, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer6, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer7, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer8, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer9, fixed("Hybrid air-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")), 1, 0))
# Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)
data <- data %>%
mutate(dummy_hybrid_ground_source_16b = ifelse(str_detect(x16b_answer1, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer2, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer3, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer4, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer5, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer6, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer7, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer8, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")) |
str_detect(x16b_answer9, fixed("Hybrid ground-source heat pump (e.g. a heat pump and gas/oil powered unit(s), combined or separate)")), 1, 0))
# Heat pumps for shared ground loops
data <- data %>%
mutate(dummy_ground_loops_16b = ifelse(str_detect(x16b_answer1, "Heat pumps for shared ground loops") |
str_detect(x16b_answer2, "Heat pumps for shared ground loops") |
str_detect(x16b_answer3, "Heat pumps for shared ground loops") |
str_detect(x16b_answer4, "Heat pumps for shared ground loops") |
str_detect(x16b_answer5, "Heat pumps for shared ground loops") |
str_detect(x16b_answer6, "Heat pumps for shared ground loops") |
str_detect(x16b_answer7, "Heat pumps for shared ground loops") |
str_detect(x16b_answer8, "Heat pumps for shared ground loops") |
str_detect(x16b_answer9, "Heat pumps for shared ground loops"), 1, 0))
# Heat pumps for communal heating systems (air source or ground source)
data <- data %>%
mutate(dummy_communal_heating_16b = ifelse(str_detect(x16b_answer1, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16b_answer2, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16b_answer3, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16b_answer4, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16b_answer5, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16b_answer6, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16b_answer7, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16b_answer8, fixed("Heat pumps for communal heating systems (air source or ground source)")) |
str_detect(x16b_answer9, fixed("Heat pumps for communal heating systems (air source or ground source)")), 1, 0))
# Water-source heat pump
data <- data %>%
mutate(dummy_water_source_16b = ifelse(str_detect(x16b_answer1, "Water-source heat pump") |
str_detect(x16b_answer2, "Water-source heat pump") |
str_detect(x16b_answer3, "Water-source heat pump") |
str_detect(x16b_answer4, "Water-source heat pump") |
str_detect(x16b_answer5, "Water-source heat pump") |
str_detect(x16b_answer6, "Water-source heat pump") |
str_detect(x16b_answer7, "Water-source heat pump") |
str_detect(x16b_answer8, "Water-source heat pump") |
str_detect(x16b_answer9, "Water-source heat pump"), 1, 0))
# Other
data <- data %>%
mutate(dummy_other_16b = ifelse(str_detect(x16b_answer1, "Other") |
str_detect(x16b_answer2, "Other") |
str_detect(x16b_answer3, "Other") |
str_detect(x16b_answer4, "Other") |
str_detect(x16b_answer5, "Other") |
str_detect(x16b_answer6, "Other") |
str_detect(x16b_answer7, "Other") |
str_detect(x16b_answer8, "Other") |
str_detect(x16b_answer9, "Other"), 1, 0))
# Merge each dummy for type of heat pump across 16a and 16b to get the distribution for all installers
data <- data %>%
mutate(dummy_air_source_all = coalesce(dummy_air_source_16a, dummy_air_source_16b))
data <- data %>%
mutate(dummy_air_air_all = coalesce(dummy_air_air_16a, dummy_air_air_16b))
data <- data %>%
mutate(dummy_ground_source_all = coalesce(dummy_ground_source_16a, dummy_ground_source_16b))
data <- data %>%
mutate(dummy_hybrid_air_source_all = coalesce(dummy_hybrid_air_source_16a, dummy_hybrid_air_source_16b))
data <- data %>%
mutate(dummy_hybrid_ground_source_all = coalesce(dummy_hybrid_ground_source_16a, dummy_hybrid_ground_source_16b))
data <- data %>%
mutate(dummy_ground_loops_all = coalesce(dummy_ground_loops_16a, dummy_ground_loops_16b))
data <- data %>%
mutate(dummy_communal_heating_all = coalesce(dummy_communal_heating_16a, dummy_communal_heating_16b))
data <- data %>%
mutate(dummy_water_source_all = coalesce(dummy_water_source_16a, dummy_water_source_16b))
data <- data %>%
mutate(dummy_other_all = coalesce(dummy_other_16a, dummy_other_16b))
# Create a new dataframe with only the dummy variables above
subset_dummy <- data %>%
select("dummy_air_source_all", "dummy_air_air_all", "dummy_ground_source_all", "dummy_hybrid_air_source_all", "dummy_hybrid_ground_source_all", "dummy_ground_loops_all", "dummy_communal_heating_all", "dummy_water_source_all", "dummy_other_all")
# Summarise the distribution
summary_table <- subset_dummy %>%
summarise_all(~ sum(. == 1, na.rm = TRUE))
# Rename variables in the subset
new_names <- c("Air-source (air-to-water) heat pumps",
"Air-to-air heat pumps",
"Ground-source heat pumps",
"Hybrid air-source heat pumps",
"Hybrid ground-source heat pumps",
"Heat pumps for shared ground loops",
"Heat pumps for communal heating systems",
"Water-source heat pumps",
"Other")
# Create data frame to produce the table
summary_table <- data.frame(Dummy_Variable = new_names, Frequency = as.vector(t(summary_table)))
# Create table
kable(summary_table,
caption = "Table 2.8a. The types of heat pumps have survey participants installed over the last 12 months (all installers)",
col.names = c("Ways of working", "Frequency"),
align = "c") %>%
kable_classic(bootstrap_options = c("striped"),
full_width = T,
html_font = "Arial") %>%
row_spec(0, bold = T)
# Chunk 118
## OBQA
# Create function to detect string among all responses
## This is kind of funky as it has an anonymous function inside of it, because of each row being a list.
extract_type <- function(name, string, var, suffix) {
map(var,
\(.x) {
str_detect(.x, fixed(string)) |>
sum(na.rm = TRUE) |>
as.data.frame() |>
rename(!!as.name(paste0(name, suffix)) := 1)
}
) |>
list_rbind()
}
# Creating lists
names <- c("xdummy_air_source_all",
"xdummy_air_air_all",
"xdummy_ground_source_all",
"xdummy_hybrid_air_source_all",
"xdummy_hybrid_ground_source_all",
"xdummy_ground_loops_all",
"xdummy_communal_heating_all",
"xdummy_water_source_all",
"xdummy_other_all") ## Will be the names of variables
strings <- c("Air-source (air-to-water) heat pumps",
"Air-to-air heat pumps",
"Ground-source heat pumps",
"Hybrid air-source heat pumps",
"Hybrid ground-source heat pumps",
"Heat pumps for shared ground loops",
"Heat pumps for communal heating systems",
"Water-source heat pumps",
"Other") ## Strings to look for
# Mapping over variable list for 16a
data <- data |>
bind_cols(map2(names, strings, ~extract_type(.x, .y, suffix = "_16a", var = data$x16a_what_types_of_heat_pump_has_your_company_installed_over_the_last_12_months_select_all_that_apply), .progress = TRUE))
# Mapping over variable list for 16b
data <- data |>
bind_cols(map2(names, strings, ~extract_type(.x, .y, suffix = "_16b", var = data$x16b_what_types_of_heat_pump_have_you_installed_over_the_last_12_months_select_all_that_apply), .progress = TRUE))
# Combining
sum_over <- function(var) {
data |>
mutate(!!as.name(var) := rowSums(pick(starts_with(var)))) |>
select(.data[[var]])
}
data <- data |>
bind_cols(
map(names, ~sum_over(.x))
)
data |> tabyl(dummy_communal_heating_all)
data |> tabyl(xdummy_communal_heating_all)
data |> tabyl(xdummy_communal_heating_all_16a)
data |> tabyl(xdummy_communal_heating_all_16b)
# Rename variables in the subset for clear display in plot
subset_dummy <- subset_dummy %>%
rename_all(~ new_names)
summary_table <- subset_dummy %>%
summarise_all(~ sum(. == 1, na.rm = TRUE))
# Create object to produce plot
summary_long <- tidyr::gather(summary_table, key = "dummy_variable", value = "count")
# Produce plot
ggplot(summary_long, aes(x = factor(dummy_variable, levels = c("Air-source (air-to-water) heat pumps",
"Air-to-air heat pumps",
"Ground-source heat pumps",
"Hybrid air-source heat pumps",
"Hybrid ground-source heat pumps",
"Heat pumps for shared ground loops",
"Heat pumps for communal heating systems",
"Water-source heat pumps",
"Other")), y = count)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Figure 2.8a. The types of heat pumps have survey participants installed over the last 12 months (all installers)", x = "", y = "Frequency") +
theme_bw() +
scale_y_continuous(breaks = seq(0, 340, by = 40)) +
scale_x_discrete(labels = label_wrap_gen(width = 10))
summary_long_qa <- pivot_longer(summary_table, names_to = "dummy_variable", values_to = "count")
# Create plot of distribution
# Rename variables in the subset for clear display in plot
subset_dummy <- subset_dummy %>%
rename_all(~ new_names)
# Summarise the distribution
summary_table <- subset_dummy %>%
summarise_all(~ sum(. == 1, na.rm = TRUE))
# Create object to produce plot
summary_long <- tidyr::gather(summary_table, key = "dummy_variable", value = "count")
View(summary_table)
summary_long_qa <- pivot_longer(summary_table, names_to = "dummy_variable", values_to = "count")
summary_long_qa <- summary_table |>
pivot_longer(names_to = "dummy_variable", values_to = "count")
View(summary_table)
View(summary_long)
subset_dummy <- subset_dummy %>%
rename_all(~ new_names)
View(subset_dummy)
summary_long_qa <- subset_dummy |>
pivot_longer(names_to = "dummy_variable", values_to = "count")
View(subset_dummy)
summary_long_qa <- subset_dummy |>
pivot_longer(cols = starts_with("dummy"), names_to = "dummy_variable", values_to = "count")
summary_long_qa <- subset_dummy |>
pivot_longer(cols = everything(), names_to = "dummy_variable", values_to = "count")
View(summary_long_qa)
head(subset_dummy)
summary_long_qa <- subset_dummy |>
summarise_all(sum(na.rm = TRUE)) |>
pivot_longer(cols = everything(), names_to = "dummy_variable", values_to = "count")
summary_long_qa <- subset_dummy |>
summarise_all(~sum(na.rm = TRUE)) |>
pivot_longer(cols = everything(), names_to = "dummy_variable", values_to = "count")
View(summary_long_qa)
summary_long_qa <- subset_dummy |>
summarise_all(~sum(na.rm = TRUE))
View(summary_long_qa)
glimpse(subset_dummy)
summary_long_qa <- subset_dummy |>
summarise(across(everything(), sum) |>
pivot_longer(cols = everything(), names_to = "dummy_variable", values_to = "count")
summary_long_qa <- subset_dummy |>
summarise(across(everything()), sum) |>
pivot_longer(cols = everything(), names_to = "dummy_variable", values_to = "count")
### OBQA
summary_long_qa <- subset_dummy |>
summarise(across(everything()), ~sum(.x, na.rm = TRUE)) |>
pivot_longer(cols = everything(), names_to = "dummy_variable", values_to = "count")
summary_long_qa <- subset_dummy |>
summarise_all(max) |>
pivot_longer(cols = everything(), names_to = "dummy_variable", values_to = "count")
View(summary_long_qa)
summary_long_qa <- subset_dummy |>
summarise_all(sum) |>
pivot_longer(cols = everything(), names_to = "dummy_variable", values_to = "count")
View(summary_long_qa)
summary_long_qa <- subset_dummy |>
summarise_all(sum(na.rm = TRUE)) |>
pivot_longer(cols = everything(), names_to = "dummy_variable", values_to = "count")
summary_table <- subset_dummy %>%
summarise(across(everything(), list(name = ~ mean(.x))))
summary_long_qa <- subset_dummy |>
summarise(across(everything(), list(name = ~ mean(.x)))) |>
pivot_longer(cols = everything(), names_to = "dummy_variable", values_to = "count")
View(summary_long_qa)
summary_long_qa <- subset_dummy |>
summarise(across(everything(), name = ~ mean(.x))) |>
pivot_longer(cols = everything(), names_to = "dummy_variable", values_to = "count")
summary_long_qa <- subset_dummy |>
summarise(across(everything(), list(name = ~ mean(.x, na.rm = TRUE)))) |>
pivot_longer(cols = everything(), names_to = "dummy_variable", values_to = "count")
summary_long_qa <- subset_dummy |>
summarise(across(everything(), list(name = ~sum(.x, na.rm = TRUE)))) |>
pivot_longer(cols = everything(), names_to = "dummy_variable", values_to = "count")
View(summary_long_qa)
View(summary_long)
